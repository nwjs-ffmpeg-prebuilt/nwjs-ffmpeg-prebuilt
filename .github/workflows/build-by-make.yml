name: CI

on:
  release:
    types: [ created ]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number to build'
        required: true
        default: '0.100.1' # has sonames of libavcodec's with latest Opera 
concurrency:
  group: ${{ github.ref }}-make # fix after reviewed
  cancel-in-progress: false # true

jobs:
  is-latest:
    name: "Is Latest"
    runs-on: ubuntu-latest
    outputs:
      nw: ${{ steps.set_nw.outputs.nw }}
      chromium: ${{ steps.set_nw.outputs.chromium }}
      commit: ${{ steps.set_nw.outputs.commit }}
      avcodec: ${{ steps.set_nw.outputs.avcodec }}
      avformat: ${{ steps.set_nw.outputs.avformat }}
      avutil: ${{ steps.set_nw.outputs.avutil }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Check if latest
        working-directory: .github/workflows
        run: true #bash ./is_latest.sh ${{ github.event_name }} #replaced until reviewed
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
      - name: Write NW version to env and set output
        id: set_nw
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "nw=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            NW_VERSION=$(curl -s https://nwjs.io/versions.json | jq -r '.latest' | sed 's/v//')
            echo "nw=$NW_VERSION" >> $GITHUB_OUTPUT
          fi
          CHROMIUM=$(curl -s https://nwjs.io/versions.json | jq -r ".versions[] | select(.version==\"v$NW_VERSION\") | .components.chromium")
          echo "chromium=$CHROMIUM" >> $GITHUB_OUTPUT
          _commit=$(curl -sL https://chromium.googlesource.com/chromium/src.git/+/refs/tags/${CHROMIUM}/DEPS?format=TEXT | base64 -d | grep -oP "'ffmpeg_revision': '\K[0-9a-f]{40}'" | tr -d \')
           echo "commit=$_commit" >> $GITHUB_OUTPUT
          _url=https://chromium.googlesource.com/chromium/third_party/ffmpeg
          SO=$(curl -sL ${_url}/+/${_commit}/libavcodec/version_major.h?format=TEXT|base64 -d | grep -oP 'LIBAVCODEC_VERSION_MAJOR\s+\K\d+')
          echo "avcodec=$SO" >> $GITHUB_OUTPUT
          SO=$(curl -sL ${_url}/+/${_commit}/libavformat/version_major.h?format=TEXT|base64 -d | grep -oP 'LIBAVFORMAT_VERSION_MAJOR\s+\K\d+')
          echo "avformat=$SO" >> $GITHUB_OUTPUT
          SO=$(curl -sL ${_url}/+/${_commit}/libavutil/version.h?format=TEXT|base64 -d | grep -oP 'LIBAVUTIL_VERSION_MAJOR\s+\K\d+')
          echo "avutil=$SO" >> $GITHUB_OUTPUT
  build-win-x64:
    needs: is-latest
    name: "Build for Windows on Ubuntu"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm gcc-mingw-w64-x86-64
      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p /tmp/nwff;cd /tmp/nwff
          curl https://chromium.googlesource.com/chromium/third_party/ffmpeg/+archive/${{ needs.is-latest.outputs.commit }}.tar.gz -o chromium-ffmpeg.tar.gz
          tar -xf chromium-ffmpeg.tar.gz
          MAKEFLAGS=-j3 bash ${{ github.workspace }}/build.sh win-x64
          zip -9 ${{ needs.is-latest.outputs.nw }}-win-x64.zip ffmpeg.dll
      - name: Upload the artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: win-x64
          path: '/tmp/nwff/*.zip'

  build-win-ia32:
    needs: is-latest
    name: "Build for Windows-ia32 on Ubuntu"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm gcc-mingw-w64-i686
      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p /tmp/nwff;cd /tmp/nwff
          curl https://chromium.googlesource.com/chromium/third_party/ffmpeg/+archive/${{ needs.is-latest.outputs.commit }}.tar.gz -o chromium-ffmpeg.tar.gz
          tar -xf chromium-ffmpeg.tar.gz
          MAKEFLAGS=-j3 bash ${{ github.workspace }}/build.sh win-ia32
          zip -9 ${{ needs.is-latest.outputs.nw }}-win-ia32.zip ffmpeg.dll
      - name: Upload the artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: win-ia32
          path: '/tmp/nwff/*.zip'

  build-osx-x64:
    needs: is-latest
    name: "Build for macos-x64"
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup build tools
        run: |
          brew update
          brew install nasm
      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p /tmp/nwff;cd /tmp/nwff
          curl https://chromium.googlesource.com/chromium/third_party/ffmpeg/+archive/${{ needs.is-latest.outputs.commit }}.tar.gz -o chromium-ffmpeg.tar.gz
          tar -xf chromium-ffmpeg.tar.gz
          MAKEFLAGS=-j3 bash ${{ github.workspace }}/build.sh osx-x64
          zip -9 ${{ needs.is-latest.outputs.nw }}-osx-x64.zip libffmpeg.dylib
      - name: Upload the artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: osx-x64
          path: '/tmp/nwff/*.zip'

  build-osx-arm64:
    needs: is-latest
    name: "Build for macos-arm64"
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup build tools
        run: |
          brew update
          brew install nasm
      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p /tmp/nwff;cd /tmp/nwff
          curl https://chromium.googlesource.com/chromium/third_party/ffmpeg/+archive/${{ needs.is-latest.outputs.commit }}.tar.gz -o chromium-ffmpeg.tar.gz
          tar -xf chromium-ffmpeg.tar.gz
          MAKEFLAGS=-j3 bash ${{ github.workspace }}/build.sh osx-arm64
          zip -9 ${{ needs.is-latest.outputs.nw }}-osx-arm64.zip libffmpeg.dylib
      - name: Upload the artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: osx-arm64
          path: '/tmp/nwff/*.zip'

  build-linux-x64:
    needs: is-latest
    name: "Build for Linux-x64"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm
      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p /tmp/nwff;cd /tmp/nwff
          curl https://chromium.googlesource.com/chromium/third_party/ffmpeg/+archive/${{ needs.is-latest.outputs.commit }}.tar.gz -o chromium-ffmpeg.tar.gz
          tar -xf chromium-ffmpeg.tar.gz
          MAKEFLAGS=-j3 bash ${{ github.workspace }}/build.sh linux-x64
          zip -9 ${{ needs.is-latest.outputs.nw }}-linux-x64.zip libffmpeg.so
      - name: Upload the artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: linux-x64
          path: '/tmp/nwff/*.zip'

  build-linux-ia32:
    needs: is-latest
    name: "Build for Linux-ia32"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm gcc-multilib
      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p /tmp/nwff;cd /tmp/nwff
          curl https://chromium.googlesource.com/chromium/third_party/ffmpeg/+archive/${{ needs.is-latest.outputs.commit }}.tar.gz -o chromium-ffmpeg.tar.gz
          tar -xf chromium-ffmpeg.tar.gz
          MAKEFLAGS=-j3 bash ${{ github.workspace }}/build.sh linux-ia32
          zip -9 ${{ needs.is-latest.outputs.nw }}-linux-ia32.zip libffmpeg.so
      - name: Upload the artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: linux-ia32
          path: '/tmp/nwff/*.zip'

  build-release:
    needs: [ is-latest, build-win-x64, build-win-ia32, build-osx-x64, build-osx-arm64, build-linux-x64, build-linux-ia32]
    name: "Build Release"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/download-artifact@v4.3.0
        with:
          name: win-x64
          path: release/win-x64
      - uses: actions/download-artifact@v4.3.0
        with:
          name: win-ia32
          path: release/win-ia32
      - uses: actions/download-artifact@v4.3.0
        with:
          name: linux-x64
          path: release/linux-x64
      - uses: actions/download-artifact@v4.3.0
        with:
          name: linux-ia32
          path: release/linux-ia32
      - uses: actions/download-artifact@v4.3.0
        with:
          name: osx-x64
          path: release/osx-x64
      - uses: actions/download-artifact@v4.3.0
        with:
          name: osx-arm64
          path: release/osx-arm64

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: release/

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/osx-arm64/*.zip
            release/osx-x64/*.zip
            release/linux-x64/*.zip
            release/linux-ia32/*.zip
            release/win-x64/*.zip
            release/win-ia32/*.zip
          tag_name: ${{ needs.is-latest.outputs.nw }}
          body: |
            Chromium ${{ needs.is-latest.outputs.chromium }}
            Commit of chromium/third_pirty/ffmpeg ${{ needs.is-latest.outputs.commit }}
            avcodec${{ needs.is-latest.outputs.avcodec }}
            avformat${{ needs.is-latest.outputs.avformat }}
            avutil${{ needs.is-latest.outputs.avutil }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
